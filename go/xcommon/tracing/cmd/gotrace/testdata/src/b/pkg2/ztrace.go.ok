// Code generated by lab.nexedi.com/kirr/go123/tracing/cmd/gotrace; DO NOT EDIT.

package pkg2
// code generated for tracepoints

import (
	"lab.nexedi.com/kirr/neo/go/xcommon/tracing"
	"unsafe"

	"a/pkg1"
	"net/url"
)

// traceevent: traceDoSomething(i, j int, q string)	XXX better raw .Text (e.g. comments)

type _t_traceDoSomething struct {
	tracing.Probe
	probefunc     func(i, j int, q string)
}

var _traceDoSomething *_t_traceDoSomething

func traceDoSomething(i, j int, q string) {
	if _traceDoSomething != nil {
		_traceDoSomething_run(i, j, q)
	}
}

func _traceDoSomething_run(i, j int, q string) {
	for p := _traceDoSomething; p != nil; p = (*_t_traceDoSomething)(unsafe.Pointer(p.Next())) {
		p.probefunc(i, j, q)
	}
}

func traceDoSomething_Attach(pg *tracing.ProbeGroup, probe func(i, j int, q string)) *tracing.Probe {
	p := _t_traceDoSomething{probefunc: probe}
	tracing.AttachProbe(pg, (**tracing.Probe)(unsafe.Pointer(&_traceDoSomething)), &p.Probe)
	return &p.Probe
}

// traceimport: a/pkg1

//go:linkname pkg1_traceDoSomething_Attach a/pkg1.traceDoSomething_Attach
func pkg1_traceDoSomething_Attach(*tracing.ProbeGroup, func(topic string)) *tracing.Probe

//go:linkname pkg1_traceNewT_Attach a/pkg1.traceNewT_Attach
func pkg1_traceNewT_Attach(*tracing.ProbeGroup, func(t *pkg1.T)) *tracing.Probe

//go:linkname pkg1_traceNewTPre_Attach a/pkg1.traceNewTPre_Attach
func pkg1_traceNewTPre_Attach(*tracing.ProbeGroup, func()) *tracing.Probe

//go:linkname pkg1_traceURLParsed_Attach a/pkg1.traceURLParsed_Attach
func pkg1_traceURLParsed_Attach(*tracing.ProbeGroup, func(u *url.URL)) *tracing.Probe
