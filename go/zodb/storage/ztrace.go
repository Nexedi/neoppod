// Code generated by lab.nexedi.com/kirr/go123/tracing/cmd/gotrace; DO NOT EDIT.

package storage
// code generated for tracepoints

import (
	"lab.nexedi.com/kirr/neo/go/xcommon/tracing"
	"unsafe"
)

// traceevent: traceCacheGCFinish(c *Cache)

type _t_traceCacheGCFinish struct {
	tracing.Probe
	probefunc     func(c *Cache)
}

var _traceCacheGCFinish *_t_traceCacheGCFinish

func traceCacheGCFinish(c *Cache) {
	if _traceCacheGCFinish != nil {
		_traceCacheGCFinish_run(c)
	}
}

func _traceCacheGCFinish_run(c *Cache) {
	for p := _traceCacheGCFinish; p != nil; p = (*_t_traceCacheGCFinish)(unsafe.Pointer(p.Next())) {
		p.probefunc(c)
	}
}

func traceCacheGCFinish_Attach(pg *tracing.ProbeGroup, probe func(c *Cache)) *tracing.Probe {
	p := _t_traceCacheGCFinish{probefunc: probe}
	tracing.AttachProbe(pg, (**tracing.Probe)(unsafe.Pointer(&_traceCacheGCFinish)), &p.Probe)
	return &p.Probe
}

// traceevent: traceCacheGCStart(c *Cache)

type _t_traceCacheGCStart struct {
	tracing.Probe
	probefunc     func(c *Cache)
}

var _traceCacheGCStart *_t_traceCacheGCStart

func traceCacheGCStart(c *Cache) {
	if _traceCacheGCStart != nil {
		_traceCacheGCStart_run(c)
	}
}

func _traceCacheGCStart_run(c *Cache) {
	for p := _traceCacheGCStart; p != nil; p = (*_t_traceCacheGCStart)(unsafe.Pointer(p.Next())) {
		p.probefunc(c)
	}
}

func traceCacheGCStart_Attach(pg *tracing.ProbeGroup, probe func(c *Cache)) *tracing.Probe {
	p := _t_traceCacheGCStart{probefunc: probe}
	tracing.AttachProbe(pg, (**tracing.Probe)(unsafe.Pointer(&_traceCacheGCStart)), &p.Probe)
	return &p.Probe
}

// trace export signature
func _trace_exporthash_46a80e8af5056736069c296a95ad4c94388ab850() {}
