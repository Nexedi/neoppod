#!/usr/bin/env python2
# TODO author/copyright
"""generate reference database and index for tests"""

# TODO generate transactions with backpointers

from ZODB.FileStorage import FileStorage
from ZODB import DB
from persistent import Persistent
import transaction

import struct
import time
import random
import logging

# convert numeric oid to/from str
def oid(num):
    return struct.pack('>Q', num)

def oidN(packed):
    return struct.unpack('>Q', packed)[0]

# make time.time() predictable
_xtime = time.mktime(time.strptime("04 Jan 1979", "%d %b %Y"))
def xtime():
    global _xtime
    _xtime += 1.1
    return _xtime
time.time = xtime


def commit(user, description, extension):
    txn = transaction.get()
    txn.user = user
    txn.description = description
    txn.extension = extension
    txn.commit()


class Object(Persistent):
    # .value
    def __init__(self, value):
        self.value = value

    def __getstate__(self):
        return self.value

    def __setstate__(self, state):
        self.value = state

def main():
    logging.basicConfig()

    stor = FileStorage("testdata/1.fs", create=True)
    db   = DB(stor)
    conn = db.open()
    root = conn.root()
    assert root._p_oid == oid(0), `root._p_oid`

    # generate random changes to objects hooked to top-level root by a/b/c/... key
    random.seed(0)

    namev = [_ for _ in "abcdefg"]
    for i in range(50):
        name = random.choice(namev)
        if name in root:
            obj = root[name]
        else:
            root[name] = obj = Object(None)

        obj.value = "%s%i" % (name, i)

        commit(u"user%i" % i, u"step %i" % i, {"x-generator": "zodb/py2 (%s)" % name})

    conn.close()
    db.close()
    stor.close()

    # dump to go what to expect
    with open("testdata_expect_test.go", "w") as f:
        def emit(v):
            print >>f, v
        emit("// DO NOT EDIT - AUTOGENERATED (by py/gen-testdata)")
        emit("package fs1\n")
        emit("const _1fs_indexTopPos = %i" % stor._pos)
        emit("var _1fs_indexEntryv = [...]indexEntry{")
        for k, v in stor._index.iteritems():
            emit("\t{%8i, %8i}," % (oidN(k), v))
        emit("}")


if __name__ == '__main__':
    main()
