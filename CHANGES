Change History
==============

1.3 (2015-01-13)
----------------

- Version 1.2 added a new 'Importer' storage backend but it had 2 bugs.

  - An interrupted migration could not be resumed.
  - Merging several ZODB only worked if NEO could import all classes used by
    the application. This has been fixed by repickling without loading any
    object.

- Logging has been improved for a better integration with the environment:

  - RTMIN+1 signal was changed to reopen logs. RTMIN+1 & RTMIN+2 signals, which
    were previously used for debugging, have been remapped to RTMIN+2 & RTMIN+3
  - In Zope, client registers automatically for log rotation (USR2).
  - NEO logs are SQLite DB that are not open anymore with a persistent journal,
    because this is incompatible with the rename+reopen way to rotate logs,
    and we want to support logrotate.
  - 'neolog' can now open gzip/bz2 compressed logs transparently.
  - 'neolog' does not spam the console anymore when piped to a process that
    exits prematurely.

- MySQL backend has been updated to work with recent MariaDB (>=10).
- 2 'neomaster' command-line options were added to set upstream cluster/masters.

1.2 (2014-07-30)
----------------

The most important changes in this version are the work about conversion of
databases from/to NEO:

- A new 'Importer' storage backend has been implemented and this is now the
  recommended way to migrate existing Zope databases. See 'importer.conf'
  example file for more information.
- 'neomigrate' command refused to run since version 1.0
- Exported data serials by NEO iterator were wrong. There are still differences
  with FileStorage:

  - NEO always resolves to original serial, to avoid any indirection
    (which slightly speeds up undo at the expense of a more complex pack code)
  - NEO does not make any difference between object deletion and creation undone
    (data serial always null in storage)

  Apart from that, conversion of database back from NEO should be fixed.

Other changes are:

- A warning was added in 'neo.conf' about a possible misuse of replicas.
- Compatibility with Python 2.6 has been dropped.
- Support for recent version of SQlite has been added.
- A memory leak has been fixed in replication.
- MySQL backend now fails instead of silently reconnecting if there is any
  pending change, which could cause data loss.
- Optimization and minor bugfixes.

1.1 (2014-01-07)
----------------

- Client failed at reconnecting properly to master. It could kill the master
  (during tpc_finish!) or end up with invalid caches (i.e. possible data
  corruption). Now, connection to master is even optional between
  transaction.begin() and tpc_begin, as long as partition table contains
  up-to-date data.
- Compatibility with ZODB 3.9 has been dropped. Only 3.10.x branch is supported.
- checkCurrentSerialInTransaction was not working.
- Optimization and minor bugfixes.

1.0 (2012-08-28)
----------------

This version mainly comes with stabilized SQL tables format and efficient backup
feature, relying on replication, which has been fully reimplemented:

- It is now incremental, instead of being done on whole partitions.
  Schema of MySQL tables have been changed in order to optimize storage layout,
  for good partial replication performance.
- It runs at lowest priority not to degrade performance for client nodes.
- A cluster in the new BACKINGUP state is a client to a normal cluster and all
  its storage nodes are notified of invalidations and replicate from upstream
  nodes.

Other changes are:

- Compatibility with Python < 2.6 and ZODB < 3.9 has been dropped.
- Cluster is now automatically started when all storage nodes of UP_TO_DATE
  cells are available, similarly to ``mdadm assemble --no-degraded`` behaviour.
- NEO learned to check replicas, to detect data corruption or bugs during
  replication. When done on a backup cluster, upstream data is used as
  reference. This is still limited to data indexes (tid & oid/serial).
- NEO logs now are SQLite DB that always contain all debugging information
  including exchanged packets. Records are first kept in RAM, at most 16 MB by
  default, and there are flushed to disk only upon RTMIN signal or any important
  record. A 'neolog' script has been written to help reading such DB.
- Master addresses must be separated by spaces. '/' can't be used anymore.
- Adding and removing master nodes is now easier: unknown incoming master nodes
  are now accepted instead of rejected, and nodes can be given a path to a file
  that maintains a list of known master nodes.
- Node UUIDs have been shortened from 16 to 4 bytes, for better performance and
  easier debugging.

Also contains code clean-ups and bugfixes.

0.10.1 (2012-03-13)
-------------------

- Client didn't limit its memory usage when committing big transactions.
- Master failed to disconnect clients when cluster leaves RUNNING state.

0.10 (2011-10-17)
-----------------

- Storage was unable or slow to process large-sized transactions.
  This required to change protocol and MySQL tables format.
- NEO learned to store empty values (although it's useless when managed by
  a ZODB Connection).

0.9.2 (2011-10-17)
------------------

- storage: a specific socket can be given to MySQL backend
- storage: a ConflictError could happen when client is much faster than master
- 'verbose' command line option of 'neomigrate' did not work
- client: ZODB monkey-patch randomly raised a NameError

0.9.1 (2011-09-24)
------------------

- client: method to retrieve history of persistent objects was incompatible
  with recent ZODB and needlessly asked all storages systematically.
- neoctl: 'print node' command (to get list of all nodes) raised an
  AssertionError.
- 'neomigrate' raised a TypeError when converting NEO DB back to FileStorage.

0.9 (2011-09-12)
----------------

Initial release.

NEO is considered stable enough to replace existing ZEO setups, except that:

- there's no backup mechanism (aka efficient snapshoting): there's only
  replication and underlying MySQL tools

- MySQL tables format may change in the future
